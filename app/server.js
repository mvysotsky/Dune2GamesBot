// https://github.com/mullwar/telebot
const TeleBot = require('telebot');

const bot = new TeleBot('1613103423:AAF1Stk2XAikkL2LeB_eDh1PN3WrJtHKfAs');

const servers = [
    'gs.emu-land.net',
    'nst.nekketsu.fun',
    '151.248.126.219',
];

let new_pending = {};
let lastListID = {};
let lastOpenID = {};
let lastActiveID = {};
let games = {};

bot.on(['/start','/hello','/help'], (msg) => {

    if (msg.chat.type === 'group') {
        msg.reply.text(
            '–ü—Ä–∏–≤–µ—Ç!\n' +
            '–Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–∞–º–∏ Dune 2!\n\n' +
            '–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞:\n' +
            '/new - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É\n' +
            '/open - –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ –∏–≥—Ä—ã (–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è) \n' +
            '/active - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä\n' +
            '/list - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏ –æ—Ç–∫—Ä—ã—Ç—ã–µ –∏–≥—Ä—ã\n'
        );
    } else {
        msg.reply.text(
            '–ü—Ä–∏–≤–µ—Ç!\n' +
            '–Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–∞–º–∏ Dune 2!\n\n' +
            '–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è –ª–∏—á–Ω–æ–≥–æ —á–∞—Ç–∞:\n' +
            '/list - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–∏—Ö –∏–≥—Ä\n'
        );
    }

});

function reply(to, text) {
    return bot.sendMessage(to.chat.id, text, { replyToMessage: to.message_id });
}

async function getGameInfoMarkup(game, type = 'group') {

    let response = `<b>üïπ –ò–≥—Ä–∞ #${game.game_id}</b>\n`;

    response += `–°–æ–∑–¥–∞–ª: ${game.from.first_name} @${game.from.username}\n`;
    response += `–°–µ—Ä–≤–µ—Ä: <code>${game.server}</code>\n`;
    response += `–°–æ–∑–¥–∞–Ω–∞: ${new Date(game.started).toLocaleString('ru-RU')}\n`;

    if (game.active) {
        let follower = await bot.getChatMember(game.group_id, game.follower_id);

        response += `–ù–∞—á–∞–ª–æ –∏–≥—Ä—ã: ${new Date(game.active).toLocaleString('ru-RU')}\n`;
        response += `–í—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫: ${follower.user.first_name} @${follower.user.username}\n`;
    }

    if (type === 'group') {
        if (!game.active) {
            response += `–ü—Ä–∏—Å–æ–µ–¥–µ–Ω–∏—Ç—å—Å—è: /join_${game.game_id}\n`;
        }
        response += `–ó–∞–≤–µ—Ä—à–∏—Ç—å: /stop_${game.game_id}\n`;
    } else if (type === 'leader') {
        response += `–ó–∞–≤–µ—Ä—à–∏—Ç—å: /stop_${game.game_id}_${game.group_id}\n`;
    }

    return response;
}

bot.on([/^\/new@Dune2GamesBot$/, /^\/new$/], async (msg, props) => {

    if (msg.chat.type !== 'group') {
        return bot.sendMessage(msg.from.id, '–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤.');
    }

    new_pending[msg.from.id] = {'group_id': msg.chat.id};
    games[msg.chat.id] = [];

    let replyMarkup = bot.keyboard([servers], {resize: true, once: true});

    try {
        await bot.sendMessage(msg.from.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä:', {replyMarkup});
    } catch (error) {
        if (error.error_code === 403) {
            reply(msg, `${msg.from.first_name}, —è –Ω–µ –º–æ–≥—É —Ç–µ–±–µ –Ω–∞–ø–∏—Å–∞—Ç—å üòï –î–æ–±–∞–≤—å –º–µ–Ω—è –ø–æ–∂–∞–ª—É–π—Å—Ç–∞: @Dune2GamesBot`);
        }
    }

});

bot.on('text', async (msg, props) => {

    if (typeof new_pending[msg.from.id] === 'undefined' || msg.chat.type === 'group') {
        return;
    }

    if (servers.includes(msg.text)) {
        new_pending[msg.from.id]['server'] = msg.text;
        new_pending[msg.from.id]['key'] = 'pending';
        return bot.sendMessage(msg.from.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞:');
    }

    if (new_pending[msg.from.id]['key'] === 'pending') {
        let group_id = new_pending[msg.from.id]['group_id'];
        let game_id = games[group_id].length;

        games[group_id][game_id] = {
            'game_id': game_id,
            'group_id': group_id,
            'server': new_pending[msg.from.id]['server'],
            'key': msg.text,
            'started': Date.now(),
            'from': msg.from
        };

        delete new_pending[msg.from.id];
        let group_response = '–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∏–≥—Ä–∞:\n\n' + await getGameInfoMarkup(games[group_id][game_id]);

        bot.sendMessage(msg.from.id, `–ù–æ–º–µ—Ä –≤–∞—à–µ–π –∏–≥—Ä—ã: ${game_id}. –û–∂–∏–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞.`);
        bot.sendMessage(group_id, group_response, {parseMode: 'HTML'});
    }

});

bot.on(/^\/join_(\d+)@Dune2GamesBot$/, async (msg, props) => {

    if (msg.chat.type !== 'group') {
        return bot.sendMessage(msg.from.id, '–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤.');
    }

    let group_id = msg.chat.id;
    let game_id = props.match[1];
    let response = '';

    response += `–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–≥—Ä–µ #${game_id}\n\n`
    response += `<b>üëæ –ò–≥—Ä–æ–∫:</b> ${msg.from.first_name} @${msg.from.username}\n`;
    response += `<b>üïπ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å:</b> /accept_${Math.abs(group_id)}_${game_id}_${msg.from.id}\n`;
    response += `<b>üôÖ –û—Ç–∫–ª–æ–Ω–∏—Ç—å:</b> /decline_${Math.abs(group_id)}_${game_id}_${msg.from.id}\n`;

    bot.sendMessage(games[group_id][game_id].from.id, response, {parseMode: 'HTML'});

    try {
        await bot.sendMessage(msg.from.id, '–°–æ–∑–¥–∞—Ç–µ–ª—é –∏–≥—Ä—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ');
    } catch (error) {
        if (error.error_code === 403) {
            reply(msg, `${msg.from.first_name}, —è –Ω–µ –º–æ–≥—É —Ç–µ–±–µ –Ω–∞–ø–∏—Å–∞—Ç—å üòï –î–æ–±–∞–≤—å –º–µ–Ω—è –ø–æ–∂–∞–ª—É–π—Å—Ç–∞: @Dune2GamesBot`);
        }
    }

});

bot.on(/^\/accept_(\d+)_(\d+)_(\d+)$/, async (msg, props) => {

    let group_id = -props.match[1];
    let game_id = props.match[2];
    let follower_id = props.match[3];
    let game = games[group_id][game_id];

    games[group_id][game_id]['active'] = Date.now();
    games[group_id][game_id]['follower_id'] = follower_id;

    await updateGroupLists(group_id);

    bot.sendMessage(msg.from.id, `–û—Ç–ø—Ä–∞–≤–ª—è—é –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞ –≤—Ç–æ—Ä–æ–º—É –∏–≥—Ä–æ–∫—É.`);
    bot.sendMessage(follower_id, `–ó–∞—è–≤–∫–∞ –∫ –∏–≥—Ä–µ #${game_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ö–æ–¥ –¥–æ—Å—Ç—É–ø–∞: ${game.key}`);
    bot.sendMessage(follower_id, await getGameInfoMarkup(game, 'follower'), {parseMode: 'HTML'});

});

bot.on(/^\/decline_(\d+)_(\d+)_(\d+)$/, async (msg, props) => {

    let group_id = -props.match[1];
    let game_id = props.match[2];
    let follower_id = props.match[3];
    let game = games[group_id][game_id];

    let leader = await bot.getChatMember(game.group_id, game.from.id);
    let follower = await bot.getChatMember(game.group_id, follower_id);

    bot.sendMessage(msg.from.id, `–ó–∞—è–≤–∫–∞ –æ—Ç –∏–≥—Ä–æ–∫–∞ @${follower.user.username} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞`);
    bot.sendMessage(follower_id, `–°–æ–∑–¥–∞—Ç–µ–ª—å @${leader.user.username} –æ—Ç–∫–ª–æ–Ω–∏–ª –≤–∞—à—É –∑–∞—è–≤–∫—É –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é –∫ –∏–≥—Ä–µ #${game_id}`);

});

bot.on([/^\/stop_(\d+)@Dune2GamesBot$/, /^\/stop_(\d+)_(\d+)$/], async (msg, props) => {

    let chat_id = msg.chat.id;
    let group_id = msg.chat.type === 'group' ? chat_id : -props.match[2];
    let game_id = props.match[1];
    let admins = await bot.getChatAdministrators(group_id);
    let adminIDs = admins.map(admin => admin.user.id);
    let isGroupAdmin = adminIDs.includes(msg.from.id);

    if (typeof games[group_id] === 'undefined') {
        return reply(msg, '–í —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä');
    }

    if (typeof games[group_id][game_id] === 'undefined') {
        return reply(msg, '–ò–≥—Ä–∞ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    if (games[group_id][game_id]['finished']) {
        return reply(msg, '–≠—Ç–∞ –∏–≥—Ä–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    }

    let game = games[group_id][game_id];

    if (game.from.id !== msg.from.id && !isGroupAdmin) {
        return reply(msg, '–ò–≥—Ä—É –º–æ–∂–µ—Ç –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç–æ–ª—å–∫–æ –µ–µ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —á–∞—Ç–∞');
    }

    games[group_id][game_id]['finished'] = Date.now();
    await updateGroupLists(group_id);

    if (isGroupAdmin && game.from.id !== msg.from.id) {
        bot.sendMessage(game.from.id,
            `–í–∞—à–∞ –∏–≥—Ä–∞ #${game.game_id} –æ—Ç ${new Date(game.started).toLocaleString('ru-RU')} ` +
            '–±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã.');
    }

    return reply(msg, `–ò–≥—Ä–∞ #${game_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞`);
});

bot.on([/^\/list@Dune2GamesBot$/, /^\/list$/], async (msg) => {

    let chatID = msg.chat.id;

    if (msg.chat.type === 'private') {
        let response = '–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∏–≥—Ä:\n\n';
        let isGamesAvailable = false;

        for (const group of games) {
            for (const game of group) {
                if (game.finished) {
                    continue;
                }

                if (game.from.id === msg.from.id) {
                    response += '\n';
                    response += await getGameInfoMarkup(game, 'leader');
                    isGamesAvailable = true;
                } else if (game.follower_id === msg.from.id) {
                    response += '\n';
                    response += await getGameInfoMarkup(game, 'follower');
                    isGamesAvailable = true;
                }
            }
        }

        if (!isGamesAvailable) {
            return bot.sendMessage(chatID, '–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç');
        } else {
            bot.sendMessage(chatID, response, {parseMode: 'HTML'}).then( re => {
                lastListID[chatID] = re.message_id;
            });
        }
    } else { // msg.chat.type === 'group'
        let groupID = msg.chat.id;

        if (typeof games[groupID] === 'undefined') {
            return msg.reply.text('–í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä');
        }

        bot.sendMessage(msg.chat.id, await getGroupGamesList(groupID, 'list'), {parseMode: 'HTML'}).then( re => {
            lastListID[chatID] = re.message_id;
        });
    }
});

bot.on([/^\/active@Dune2GamesBot$/, /^\/active$/], async (msg) => {
    if (msg.chat.type !== 'group') {
        return bot.sendMessage(msg.from.id, '–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞');
    }

    let groupID = msg.chat.id;

    if (typeof games[groupID] === 'undefined') {
        return msg.reply.text('–í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä');
    }

    bot.sendMessage(msg.chat.id, await getGroupGamesList(groupID, 'active'), {parseMode: 'HTML'}).then( re => {
        lastActiveID[groupID] = re.message_id;
    });
});

bot.on([/^\/open@Dune2GamesBot$/, /^\/open$/], async (msg) => {
    if (msg.chat.type !== 'group') {
        return bot.sendMessage(msg.from.id, '–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞');
    }

    let groupID = msg.chat.id;

    if (typeof games[groupID] === 'undefined') {
        return msg.reply.text('–í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∏–≥—Ä');
    }

    bot.sendMessage(msg.chat.id, await getGroupGamesList(groupID, 'open'), {parseMode: 'HTML'}).then( re => {
        lastOpenID[groupID] = re.message_id;
    });
});

async function getGroupGamesList(groupID, mode) {

    if (typeof games[groupID] === 'undefined') {
        return '–í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä';
    }

    let response = '';
    let isListEmpty = true;

    if (mode === 'open') {
        response = '–°–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∏–≥—Ä:\n';
    } else if (mode === 'active') {
        response = '–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä:\n';
    } else {
        response = '–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä:\n';
    }

    for (let gameID = 0; gameID < games[groupID].length; gameID++) {
        if (typeof games[groupID][gameID] === 'undefined') {
            continue;
        }

        let game = games[groupID][gameID];

        if (game.finished) {
            continue;
        }

        if (mode === 'active' && !game.active) {
            continue;
        }

        if (mode === 'open' && game.active) {
            continue;
        }

        response += '\n';
        response += await getGameInfoMarkup(game);
        isListEmpty = false
    }

    return isListEmpty ? response + '–ò–≥—Ä –Ω–µ—Ç...' : response;
}

async function updateGroupLists(groupID) {

    try {
        if (lastListID[groupID]) {
            let messageID = lastListID[groupID];
            await bot.editMessageText(
                {chatId: groupID, messageId: messageID}, await getGroupGamesList(groupID, 'list'),
                {parseMode: 'html'})
        }

        if (lastOpenID[groupID]) {
            let messageID = lastOpenID[groupID];
            await bot.editMessageText(
                {chatId: groupID, messageId: messageID}, await getGroupGamesList(groupID, 'open'),
                {parseMode: 'html'}
            )
        }

        if (lastOpenID[groupID]) {
            let messageID = lastActiveID[groupID];
            await bot.editMessageText(
                {chatId: groupID, messageId: messageID}, await getGroupGamesList(groupID, 'active'),
                {parseMode: 'html'}
            )
        }
    } catch (e) {
    }

}

bot.start();